# サーバー点検システム - レポート機能仕様書 (2025-03-29 改訂版)

## 1. 概要

本仕様書は、サーバー点検システムのレポート機能の実装に関する要件と仕様を定義するものである。本機能では、システムで記録された点検データを基に、日次レポートおよび月次レポートをPDF形式で出力する。

## 2. レポート機能の目的

- 点検作業の結果を定型フォーマットで提供
- 異常箇所の迅速な把握と対応の促進
- 定期的な点検状況の可視化によるメンテナンス品質の向上
- 顧客への報告および社内の業務報告用資料の自動化

## 3. レポートの種類と内容

### 3.1 日次レポート

**目的**: 1日の点検結果をまとめたレポート

**内容**:
- レポートヘッダー（タイトル、日付、作成者情報）
- 実施概要（点検日、点検台数、点検項目数、異常検出数）
- 異常検出機器リスト（機器名、顧客名、ラック位置、異常内容）
- 点検実施率（予定点検数に対する実施率）
- 点検実施者リスト
- 緊急対応必要項目（優先度付きハイライト）
- 備考欄

### 3.2 月次レポート

**目的**: 1ヶ月の点検結果を総括したレポート

**内容**:
- レポートヘッダー（タイトル、対象月、作成者情報）
- 月間概要（総点検数、実施率、異常検出数、異常率）
- 顧客別サマリー（顧客ごとの点検数、異常数、対応状況）
- 異常検出トレンド（日別の異常検出数推移グラフ）
- 未点検機器リスト
- 繰り返し異常検出機器リスト（月内で複数回異常が検出された機器）
- 対応状況サマリー（対応済/未対応の比率）
- 前月比較（点検実施率、異常検出率の前月比較）
- 備考欄

## 4. 技術実装仕様

### 4.1 実装アプローチ

HTMLテンプレート + PDFレンダリングアプローチを採用する。

### 4.2 ディレクトリ構造

```
/client/src
  /templates
    /reports
      daily-report.html     # 日次レポートテンプレート
      monthly-report.html   # 月次レポートテンプレート
      common-header.html    # 共通ヘッダー
      common-footer.html    # 共通フッター
      report-styles.css     # レポート用スタイル
  /services
    /reporting
      templateLoader.js     # テンプレート読込
      pdfGenerator.js       # PDF生成ロジック
      dataFormatter.js      # データ整形ロジック
  /components
    /reports
      ReportGenerator.js    # レポート生成UI
      ReportPreview.js      # レポートプレビュー
      ReportOptions.js      # レポート設定オプション
```

### 4.3 テンプレート変数プレースホルダー仕様

テンプレートでは以下の形式で変数プレースホルダーを設定する:

```html
<span class="variable">{{変数名}}</span>
```

#### 4.3.1 日次レポート用変数

- `{{report_date}}` - レポート作成日
- `{{target_date}}` - 点検対象日
- `{{creator_name}}` - レポート作成者
- `{{inspection_count}}` - 点検実施数
- `{{planned_count}}` - 点検予定数
- `{{completion_rate}}` - 点検実施率
- `{{abnormal_count}}` - 異常検出数
- `{{abnormal_rate}}` - 異常検出率
- `{{inspector_list}}` - 点検実施者リスト
- `{{abnormal_devices_table}}` - 異常検出機器テーブル
- `{{notes}}` - 備考

#### 4.3.2 月次レポート用変数

- `{{report_date}}` - レポート作成日
- `{{target_month}}` - 対象月（YYYY年MM月）
- `{{creator_name}}` - レポート作成者
- `{{total_inspection_count}}` - 月間総点検数
- `{{monthly_completion_rate}}` - 月間実施率
- `{{monthly_abnormal_count}}` - 月間異常検出数
- `{{monthly_abnormal_rate}}` - 月間異常検出率
- `{{customer_summary_table}}` - 顧客別サマリーテーブル
- `{{abnormal_trend_chart}}` - 異常検出トレンドチャートのデータURL
- `{{uninspected_devices_table}}` - 未点検機器テーブル
- `{{repeat_abnormal_devices_table}}` - 繰り返し異常検出機器テーブル
- `{{status_summary}}` - 対応状況サマリー
- `{{previous_month_comparison}}` - 前月比較データ
- `{{notes}}` - 備考

### 4.4 レポート生成プロセス

1. ユーザーがレポート生成UIで種類と期間を選択
2. 選択されたレポートタイプに基づきデータを取得・集計
3. データをテンプレート変数に整形
4. テンプレートとデータを結合してHTML生成
5. 生成されたHTMLからPDFを作成
6. ユーザーにダウンロードまたはプレビュー表示

4.5 PDF生成ライブラリとフォーマット

- 主要ライブラリ: `html-pdf` または `puppeteer`
- バックアップ選択肢: `jsPDF` + `html2canvas`
- フォント: IPAフォント（https://moji.or.jp/ipafont/）
  - 日本語テキスト: IPAゴシック（IPAGothic）を必須で使用すること
  - 英数字: IPAゴシック
- ページサイズ: A4
- 解像度: 300dpi以上
- 余白: 上下25mm、左右20mm

4.6 フォント実装に関する留意点

- IPAフォントは必ずサーバーにインストールし、PDF生成時に指定すること
- フォントのライセンス（IPAフォントライセンスV1.0）を遵守すること
- フォントの埋め込み設定を有効にし、閲覧環境に依存しない表示を保証すること
- 実装例:
  - puppeteer使用時: page.evaluateハンドルでフォントファミリーをCSSで指定
  - html-pdf使用時: phantomJSのフォント設定でIPAフォントパスを指定
  - PDFKit使用時: フォントを明示的に登録し使用する

## 5. UI要件

### 5.1 レポート生成画面

- レポートタイプ選択（日次/月次）
- 日付/期間選択
  - 日次: カレンダーから日付を選択
  - 月次: 年月選択
- 顧客フィルター（特定顧客のみの抽出オプション）
- 生成オプション
  - 全件表示/異常のみ表示切替
  - ラック別フィルター
- 生成ボタン
- プレビューボタン

### 5.2 レポートプレビュー画面

- レポートプレビュー表示
- PDFダウンロードボタン
- 印刷ボタン
- 戻るボタン

## 6. データアクセス仕様

### 6.1 日次レポート用クエリ

```javascript
// 日次レポート用のデータ取得例
const getDailyReportData = async (date) => {
  // 指定日の点検データ
  const inspections = await inspectionAPI.getByDate(date);
  
  // 異常検出データ
  const abnormalResults = await inspectionAPI.getAbnormalByDate(date);
  
  // 必要なデータ集計処理
  // ...
  
  return formattedReportData;
};
```

### 6.2 月次レポート用クエリ

```javascript
// 月次レポート用のデータ取得例
const getMonthlyReportData = async (year, month) => {
  // 指定月の全点検データ
  const inspections = await inspectionAPI.getByMonth(year, month);
  
  // 顧客別データ
  const customerData = await customerAPI.getInspectionSummaryByMonth(year, month);
  
  // 日別の異常検出データ (トレンドチャート用)
  const dailyAbnormalCounts = await inspectionAPI.getDailyAbnormalCountsByMonth(year, month);
  
  // 前月データ (比較用)
  let prevMonth = month - 1;
  let prevYear = year;
  if (prevMonth < 1) {
    prevMonth = 12;
    prevYear--;
  }
  const prevMonthData = await inspectionAPI.getMonthSummary(prevYear, prevMonth);
  
  // 必要なデータ集計処理
  // ...
  
  return formattedReportData;
};
```

## 7. 画面遷移

1. サイドバーメニュー「レポート」から「レポート生成」画面へ遷移
2. レポート生成画面でパラメータ指定後、「プレビュー」または「生成」ボタンを押下
3. 「プレビュー」を選択した場合はプレビュー画面に遷移
4. 「生成」を選択した場合は直接PDFダウンロードが開始

## 8. エラーハンドリング

- データ不足時のエラーメッセージ表示
- レポート生成失敗時のエラー通知
- PDFレンダリングエラー時の代替手段（HTML直接表示など）

## 9. データベース設計

### 9.1 テーブル構造

**report_templates（レポートテンプレート）テーブル**
```
id INT (PK)
name VARCHAR(100)
type ENUM('monthly', 'daily')
template_path VARCHAR(255)
created_at TIMESTAMP
updated_at TIMESTAMP
```

**generated_reports（生成済みレポート）テーブル**
```
id INT (PK)
customer_id INT (FK)
report_date DATE
report_period VARCHAR(20)
report_type ENUM('monthly', 'daily')
file_path VARCHAR(255)
status ENUM('draft', 'completed')
template_id INT (FK)
created_by INT (FK)
created_at TIMESTAMP
```

## 10. 実装計画

### フェーズ1: 基本レポート生成機能（4週間）

1. **Week 1: データベース設計と基盤実装**
   - レポート関連テーブルの設計とマイグレーション作成
   - 基本的なAPIエンドポイントの設計
   - レポートテンプレートの骨格作成

2. **Week 2: PDF生成エンジンの基本実装**
   - PDFKitライブラリの導入
   - 基本的なPDFレイアウトの実装
   - テンプレートエンジンの統合

3. **Week 3: フロントエンド基本機能実装**
   - レポート生成UIコンポーネントの実装
   - レポート一覧画面の実装
   - APIとの連携実装

4. **Week 4: 基本機能テストと修正**
   - 単体テストの作成と実行
   - バグ修正
   - 基本機能の完成

### フェーズ2: 集計・分析機能拡張（3週間）

1. **高度な集計機能**
   - 月次データの集計機能の強化
   - サーバー別状況の分析ロジック実装
   - 異常検出の分析と集計

2. **レポート内容の強化**
   - グラフィカル要素の強化（チャート、グラフ）
   - レポートのカスタマイズオプションの実装
   - エクスポート形式の多様化（PDF/CSV/Excel）

3. **レポート履歴管理機能**
   - 過去レポートの検索・閲覧機能
   - レポートアーカイブ機能
   - レポート再生成機能

### フェーズ3: テストと最適化（2週間）

1. **総合テスト環境の構築**
   - 自動テストフレームワークの設定
   - テストケースの網羅的な作成
   - テストデータの準備

2. **自動テスト実装**
   - ユニットテスト
   - 統合テスト
   - E2Eテスト（ユーザーインターフェース）

3. **パフォーマンス最適化**
   - レンダリング速度の改善
   - メモリ使用量の最適化
   - 大規模データ処理の効率化

4. **ユーザーフィードバックと修正**
   - 内部テスターからのフィードバック収集
   - バグ修正
   - UI/UXの改善

## 11. テスト計画

### 11.1 ユニットテスト

```javascript
// PDF生成ロジックのテスト
describe('PDFGenerator', () => {
  it('should generate a daily report PDF with correct content', async () => {
    const data = {
      customer: { id: 1, name: 'テスト顧客' },
      date: '2025-03-22',
      inspectionResults: [...] // テストデータ
    };
    
    const pdfBuffer = await PDFGenerator.generateDailyReport(data);
    
    // PDFの内容を検証
    const pdfText = await extractTextFromPDF(pdfBuffer);
    expect(pdfText).toContain('テスト顧客');
    expect(pdfText).toContain('2025-03-22');
    // 他の検証...
  });
});
```

### 11.2 API統合テスト

```javascript
describe('Report API', () => {
  it('should generate a report and return success status', async () => {
    const response = await request(app)
      .post('/api/reports/generate')
      .send({
        customer_id: 1,
        report_type: 'daily',
        report_date: '2025-03-22'
      });
    
    expect(response.status).toBe(200);
    expect(response.body).toHaveProperty('reportId');
    // レポートが実際に生成されたか確認
    const reportExists = await checkReportExists(response.body.reportId);
    expect(reportExists).toBe(true);
  });
});
```

## 12. 拡張性と将来計画

- レポートテンプレートのカスタマイズ機能
- 複数言語対応（テンプレートの多言語化）
- 自動メール送信機能（レポートの自動配信）
- グラフやチャートのカスタマイズオプション
- 将来的な承認ワークフローと印影機能の追加可能性

## 13. 考慮すべき技術的課題

1. **パフォーマンス**
   - 大量のデータを含むレポート生成時のメモリ消費
   - PDFレンダリング時間の最適化
   - データベースクエリの効率化

2. **データの整合性**
   - 複数の点検結果からのデータ集計時の整合性
   - 集計タイミングと実データの同期

3. **拡張性**
   - 将来的な承認ワークフロー追加への対応
   - テンプレートのカスタマイズ機能への拡張性

本仕様に基づきレポート機能を実装することで、サーバー点検業務の効率化および点検結果の可視化を実現する。
